name: Build Classic for Testing

on:
  #push:
  workflow_dispatch:

env:
  ENABLE_ARTIFACTS_MODE: "false"
  #RUST_VER: "1.63.0"
  SHELL: "/bin/bash"

jobs:
  build-windows:
    runs-on: windows-2019
    concurrency:
      group: '${{ github.head_ref }}-windows-x64'
      cancel-in-progress: true
    steps:
      - name: Checkout branch
        if: ${{ true }}
        uses: actions/checkout@v3

      #- name: Set build directory
      #  run: |
      #    $pattern = '[\\]'
      #    $BUILD_DIR = $env:GITHUB_WORKSPACE -replace $pattern, '/'
      #    echo "G_WORKSPACE=${BUILD_DIR}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      #- name: Install depends
      #  run: |
      #    iwr -useb get.scoop.sh -outfile 'install.ps1'
      #    .\install.ps1 -RunAsAdmin
      #    scoop install sccache llvm nasm --global
      #     Install 'MozillaBuildSetup-3.4.exe'
      #    mkdir -p ~\\scoop\\buckets\\my-bucket
      #    Copy-Item -Path $env:GITHUB_WORKSPACE\\build\\github-actions\\mozilla-build.json -Destination ~\scoop\buckets\my-bucket
      #    scoop install my-bucket/mozilla-build --global
      #    rustup default $env:RUST_VER-pc-windows-msvc

      #- name: Set system PATH variable
      #  shell: bash
      #  run: |
      #    sed -i 's/SET PATH=.*/&;C:\\Rust\\.cargo\\bin;C:\\ProgramData\\scoop\\shims;C:\\ProgramData\\scoop\\apps\\llvm\\current\\bin/g' /c/ProgramData/scoop/apps/mozilla-build/current/start-shell.bat

      - name: Cache for Windows
        if: ${{ false }}
        uses: actions/cache@v3
        with:
          path: |
            ~/AppData/Local/Mozilla/sccache/cache
          key: ${{ runner.os }}-${{ hashFiles('**/browser/config/version_display.txt') }}

      - name: Uninstall old rustup
        if: ${{ true }}
        run: |
          rustup self uninstall -y

      - name: Setup MSYS2
        if: ${{ true }}
        uses: msys2/setup-msys2@v2
        with:
          release: false
          msystem: mingw64
          #update: true
          install: autotools doxygen git unzip zip
          pacboy: >
            toolchain:p
            clang:p
            lld:p
            llvm:p
            nasm:p
            python2:p
            yasm:p

      - name: Set rust environment vars
        shell: msys2 {0}
        run: |
          echo "RUSTUP_HOST=$(uname -m)-pc-windows-msvc" >> $GITHUB_ENV
          CARGO_DIR="${USERPROFILE//"${HOMEDRIVE}"/'/c'}"
          CARGO_DIR="${CARGO_DIR//'\'/'/'}"
          echo "CARGO_DIR=${CARGO_DIR}/.cargo" >> $GITHUB_ENV

      - name: Set MSYS2 PATH variable
        shell: msys2 {0}
        run: |
          echo "export PATH="${CARGO_DIR}/bin""':$PATH' >> "${HOME}/.bash_profile"

      - name: Install rustup
        if: ${{ true }}
        shell: msys2 {0}
        run: |
          echo "Downloading rustup-init.sh ..."
          curl --proto '=https' --tlsv1.2 -sSf 'https://sh.rustup.rs'>"${HOME}/rustup-init.sh"
          echo "Launching rustup-init.sh for host $RUSTUP_HOST ..."
          ${HOME}/rustup-init.sh --verbose -y --default-host ${RUSTUP_HOST} --default-toolchain none --no-modify-path

      #- name: Configure cargo
      #  shell: msys2 {0}
      #  run: |
      #      CARGO_CFG="${CARGO_DIR}/config"
      #      echo "[target.${RUSTUP_HOST}]" > "$CARGO_CFG"
      #      echo 'linker = "C:\\msys64\\mingw64\\bin\\clang++.exe"' >> "$CARGO_CFG"
      #      echo 'ar = "C:\\msys64\\mingw64\\bin\\llvm-ar.exe"' >> "$CARGO_CFG"

      - name: Install depends
        shell: msys2 {0}
        if: ${{ true }}
        run: |
          rustup default stable-${RUSTUP_HOST}

      - name: Build
        if: ${{ true }}
        shell: msys2 {0}
        run: |
          #C:\\ProgramData\\scoop\\apps\\mozilla-build\\current\\start-shell.bat "$Env:G_WORKSPACE/build/github-actions/build.sh"
          ./build/github-actions/build.sh

      - name: Package
        if: env.ENABLE_ARTIFACTS_MODE == 'true'
        run: |
          #C:\\ProgramData\\scoop\\apps\\mozilla-build\\current\\start-shell.bat "$Env:G_WORKSPACE/build/github-actions/packageZip.sh"
          ./build/github-actions/packageZip.sh

      - name: Upload artifact
        if: env.ENABLE_ARTIFACTS_MODE == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: Artifact_Classic_Windows_${{ github.run_id }}
          path: ./dist/waterfox*.zip
